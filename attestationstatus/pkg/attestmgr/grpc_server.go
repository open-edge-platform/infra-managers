// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

package attestmgr

import (
	"context"

	"google.golang.org/grpc/codes"

	computev1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/compute/v1"
	statusv1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/status/v1"
	inv_errors "github.com/open-edge-platform/infra-core/inventory/v2/pkg/errors"
	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/policy/rbac"
	"github.com/open-edge-platform/infra-core/inventory/v2/pkg/tenant"
	attestmgr_sb "github.com/open-edge-platform/infra-managers/attestationstatus/pkg/api/attestmgr/v1"
	"github.com/open-edge-platform/infra-managers/attestationstatus/pkg/invclient"
)

type server struct {
	attestmgr_sb.UnimplementedAttestationStatusMgrServiceServer
	rbac        *rbac.Policy
	authEnabled bool
}

//nolint:stylecheck,revive // naming autogenerated by protobuf
func (s *server) UpdateInstanceAttestationStatusByHostGuid(ctx context.Context,
	in *attestmgr_sb.UpdateInstanceAttestationStatusByHostGuidRequest,
) (*attestmgr_sb.UpdateInstanceAttestationStatusByHostGuidResponse, error) {
	if s.authEnabled {
		if !s.rbac.IsRequestAuthorized(ctx, rbac.UpdateKey) {
			err := inv_errors.Errorfc(codes.PermissionDenied, "Request is blocked by RBAC")
			zlog.InfraSec().InfraErr(err).Msgf("Request UpdateInstanceAttestationStatusByHostGuid is not authenticated")
			return nil, err
		}
	}
	if err := in.ValidateAll(); err != nil {
		zlog.InfraSec().InfraErr(err).Msgf("Invalid request: %v", in)
		return nil, inv_errors.Errorfc(codes.InvalidArgument, "%s", err.Error())
	}

	tenantID, present := tenant.GetTenantIDFromContext(ctx)
	if !present {
		// This should never happen! Interceptor should either fail or set it!
		err := inv_errors.Errorfc(codes.Unauthenticated, "Tenant ID is not present in context")
		zlog.InfraSec().InfraErr(err).Msg("Request UpdateInstanceAttestationStatusByHostGuid is not authenticated")
		return nil, err
	}

	guid := in.GetHostGuid()
	status := in.GetAttestationStatus()
	statusDetail := in.GetAttestationStatusDetail()

	zlog.Info().Msgf("Attestation Update, Host GUID (%s), status: %s, detail %s", guid, status, statusDetail)

	// create update for instance resource
	instRes := &computev1.InstanceResource{
		TrustedAttestationStatus: statusDetail,
	}

	// translate SB status to Inventory status
	switch status {
	case attestmgr_sb.AttestationStatus_ATTESTATION_STATUS_UNSPECIFIED:
		return nil, inv_errors.Errorfc(codes.InvalidArgument, "Unspecified is not a valid status")

	case attestmgr_sb.AttestationStatus_ATTESTATION_STATUS_VERIFIED:
		instRes.TrustedAttestationStatusIndicator = statusv1.StatusIndication_STATUS_INDICATION_IDLE
		instRes.TrustedAttestationStatus = "Verified"

	case attestmgr_sb.AttestationStatus_ATTESTATION_STATUS_FAILED:
		instRes.TrustedAttestationStatusIndicator = statusv1.StatusIndication_STATUS_INDICATION_ERROR
	}

	// query Inventory for Instance by Host GUID
	instanceResId, err := invclient.GetInstanceIDByHostGUID(ctx, tenantID, guid)
	if err != nil {
		return nil, err
	}

	// update attestation status fields
	err = invclient.UpdateInstanceAttestationStatus(ctx, tenantID, instanceResId, instRes)
	if err != nil {
		return nil, err
	}

	return &attestmgr_sb.UpdateInstanceAttestationStatusByHostGuidResponse{}, nil
}
