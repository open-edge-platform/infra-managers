// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: attestmgr/v1/attestmgr.proto

package attestmgr_sb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _attestmgr_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on
// UpdateInstanceAttestationStatusByHostGuidRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateInstanceAttestationStatusByHostGuidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateInstanceAttestationStatusByHostGuidRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateInstanceAttestationStatusByHostGuidRequestMultiError, or nil if none found.
func (m *UpdateInstanceAttestationStatusByHostGuidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInstanceAttestationStatusByHostGuidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetHostGuid()) > 36 {
		err := UpdateInstanceAttestationStatusByHostGuidRequestValidationError{
			field:  "HostGuid",
			reason: "value length must be at most 36 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetHostGuid()); err != nil {
		err = UpdateInstanceAttestationStatusByHostGuidRequestValidationError{
			field:  "HostGuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AttestationStatus

	// no validation rules for AttestationStatusDetail

	if len(errors) > 0 {
		return UpdateInstanceAttestationStatusByHostGuidRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateInstanceAttestationStatusByHostGuidRequest) _validateUuid(uuid string) error {
	if matched := _attestmgr_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateInstanceAttestationStatusByHostGuidRequestMultiError is an error
// wrapping multiple validation errors returned by
// UpdateInstanceAttestationStatusByHostGuidRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateInstanceAttestationStatusByHostGuidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInstanceAttestationStatusByHostGuidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInstanceAttestationStatusByHostGuidRequestMultiError) AllErrors() []error { return m }

// UpdateInstanceAttestationStatusByHostGuidRequestValidationError is the
// validation error returned by
// UpdateInstanceAttestationStatusByHostGuidRequest.Validate if the designated
// constraints aren't met.
type UpdateInstanceAttestationStatusByHostGuidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstanceAttestationStatusByHostGuidRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateInstanceAttestationStatusByHostGuidRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateInstanceAttestationStatusByHostGuidRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateInstanceAttestationStatusByHostGuidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstanceAttestationStatusByHostGuidRequestValidationError) ErrorName() string {
	return "UpdateInstanceAttestationStatusByHostGuidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstanceAttestationStatusByHostGuidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstanceAttestationStatusByHostGuidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstanceAttestationStatusByHostGuidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstanceAttestationStatusByHostGuidRequestValidationError{}

// Validate checks the field values on
// UpdateInstanceAttestationStatusByHostGuidResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateInstanceAttestationStatusByHostGuidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateInstanceAttestationStatusByHostGuidResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateInstanceAttestationStatusByHostGuidResponseMultiError, or nil if none found.
func (m *UpdateInstanceAttestationStatusByHostGuidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInstanceAttestationStatusByHostGuidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInstanceAttestationStatusByHostGuidResponseMultiError(errors)
	}

	return nil
}

// UpdateInstanceAttestationStatusByHostGuidResponseMultiError is an error
// wrapping multiple validation errors returned by
// UpdateInstanceAttestationStatusByHostGuidResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateInstanceAttestationStatusByHostGuidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInstanceAttestationStatusByHostGuidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInstanceAttestationStatusByHostGuidResponseMultiError) AllErrors() []error { return m }

// UpdateInstanceAttestationStatusByHostGuidResponseValidationError is the
// validation error returned by
// UpdateInstanceAttestationStatusByHostGuidResponse.Validate if the
// designated constraints aren't met.
type UpdateInstanceAttestationStatusByHostGuidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstanceAttestationStatusByHostGuidResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateInstanceAttestationStatusByHostGuidResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateInstanceAttestationStatusByHostGuidResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateInstanceAttestationStatusByHostGuidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstanceAttestationStatusByHostGuidResponseValidationError) ErrorName() string {
	return "UpdateInstanceAttestationStatusByHostGuidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstanceAttestationStatusByHostGuidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstanceAttestationStatusByHostGuidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstanceAttestationStatusByHostGuidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstanceAttestationStatusByHostGuidResponseValidationError{}
