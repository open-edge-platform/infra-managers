// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: attestmgr/v1/attestmgr.proto

package attestmgr_sb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttestationStatusMgrServiceClient is the client API for AttestationStatusMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationStatusMgrServiceClient interface {
	// This call is dedicated to updating of an Instance's Trusted Attestation Status
	UpdateInstanceAttestationStatusByHostGuid(ctx context.Context, in *UpdateInstanceAttestationStatusByHostGuidRequest, opts ...grpc.CallOption) (*UpdateInstanceAttestationStatusByHostGuidResponse, error)
}

type attestationStatusMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationStatusMgrServiceClient(cc grpc.ClientConnInterface) AttestationStatusMgrServiceClient {
	return &attestationStatusMgrServiceClient{cc}
}

func (c *attestationStatusMgrServiceClient) UpdateInstanceAttestationStatusByHostGuid(ctx context.Context, in *UpdateInstanceAttestationStatusByHostGuidRequest, opts ...grpc.CallOption) (*UpdateInstanceAttestationStatusByHostGuidResponse, error) {
	out := new(UpdateInstanceAttestationStatusByHostGuidResponse)
	err := c.cc.Invoke(ctx, "/attestmgr.v1.AttestationStatusMgrService/UpdateInstanceAttestationStatusByHostGuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationStatusMgrServiceServer is the server API for AttestationStatusMgrService service.
// All implementations should embed UnimplementedAttestationStatusMgrServiceServer
// for forward compatibility
type AttestationStatusMgrServiceServer interface {
	// This call is dedicated to updating of an Instance's Trusted Attestation Status
	UpdateInstanceAttestationStatusByHostGuid(context.Context, *UpdateInstanceAttestationStatusByHostGuidRequest) (*UpdateInstanceAttestationStatusByHostGuidResponse, error)
}

// UnimplementedAttestationStatusMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAttestationStatusMgrServiceServer struct {
}

func (UnimplementedAttestationStatusMgrServiceServer) UpdateInstanceAttestationStatusByHostGuid(context.Context, *UpdateInstanceAttestationStatusByHostGuidRequest) (*UpdateInstanceAttestationStatusByHostGuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceAttestationStatusByHostGuid not implemented")
}

// UnsafeAttestationStatusMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationStatusMgrServiceServer will
// result in compilation errors.
type UnsafeAttestationStatusMgrServiceServer interface {
	mustEmbedUnimplementedAttestationStatusMgrServiceServer()
}

func RegisterAttestationStatusMgrServiceServer(s grpc.ServiceRegistrar, srv AttestationStatusMgrServiceServer) {
	s.RegisterService(&AttestationStatusMgrService_ServiceDesc, srv)
}

func _AttestationStatusMgrService_UpdateInstanceAttestationStatusByHostGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceAttestationStatusByHostGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationStatusMgrServiceServer).UpdateInstanceAttestationStatusByHostGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestmgr.v1.AttestationStatusMgrService/UpdateInstanceAttestationStatusByHostGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationStatusMgrServiceServer).UpdateInstanceAttestationStatusByHostGuid(ctx, req.(*UpdateInstanceAttestationStatusByHostGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttestationStatusMgrService_ServiceDesc is the grpc.ServiceDesc for AttestationStatusMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttestationStatusMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attestmgr.v1.AttestationStatusMgrService",
	HandlerType: (*AttestationStatusMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateInstanceAttestationStatusByHostGuid",
			Handler:    _AttestationStatusMgrService_UpdateInstanceAttestationStatusByHostGuid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestmgr/v1/attestmgr.proto",
}
