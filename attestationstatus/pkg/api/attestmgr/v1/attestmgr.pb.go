// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: attestmgr/v1/attestmgr.proto

package attestmgr_sb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AttestationStatus int32

const (
	AttestationStatus_ATTESTATION_STATUS_UNSPECIFIED AttestationStatus = 0
	AttestationStatus_ATTESTATION_STATUS_VERIFIED    AttestationStatus = 1
	AttestationStatus_ATTESTATION_STATUS_FAILED      AttestationStatus = 2
)

// Enum value maps for AttestationStatus.
var (
	AttestationStatus_name = map[int32]string{
		0: "ATTESTATION_STATUS_UNSPECIFIED",
		1: "ATTESTATION_STATUS_VERIFIED",
		2: "ATTESTATION_STATUS_FAILED",
	}
	AttestationStatus_value = map[string]int32{
		"ATTESTATION_STATUS_UNSPECIFIED": 0,
		"ATTESTATION_STATUS_VERIFIED":    1,
		"ATTESTATION_STATUS_FAILED":      2,
	}
)

func (x AttestationStatus) Enum() *AttestationStatus {
	p := new(AttestationStatus)
	*p = x
	return p
}

func (x AttestationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttestationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_attestmgr_v1_attestmgr_proto_enumTypes[0].Descriptor()
}

func (AttestationStatus) Type() protoreflect.EnumType {
	return &file_attestmgr_v1_attestmgr_proto_enumTypes[0]
}

func (x AttestationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttestationStatus.Descriptor instead.
func (AttestationStatus) EnumDescriptor() ([]byte, []int) {
	return file_attestmgr_v1_attestmgr_proto_rawDescGZIP(), []int{0}
}

type UpdateInstanceAttestationStatusByHostGuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostGuid                string            `protobuf:"bytes,1,opt,name=host_guid,json=hostGuid,proto3" json:"host_guid,omitempty"`                                                                 // Host GUID
	AttestationStatus       AttestationStatus `protobuf:"varint,2,opt,name=attestation_status,json=attestationStatus,proto3,enum=attestmgr.v1.AttestationStatus" json:"attestation_status,omitempty"` // Instance's Attestation Status
	AttestationStatusDetail string            `protobuf:"bytes,3,opt,name=attestation_status_detail,json=attestationStatusDetail,proto3" json:"attestation_status_detail,omitempty"`                  // Detailed Attestation status (set when errors occur)
}

func (x *UpdateInstanceAttestationStatusByHostGuidRequest) Reset() {
	*x = UpdateInstanceAttestationStatusByHostGuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attestmgr_v1_attestmgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAttestationStatusByHostGuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAttestationStatusByHostGuidRequest) ProtoMessage() {}

func (x *UpdateInstanceAttestationStatusByHostGuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_attestmgr_v1_attestmgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAttestationStatusByHostGuidRequest.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAttestationStatusByHostGuidRequest) Descriptor() ([]byte, []int) {
	return file_attestmgr_v1_attestmgr_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateInstanceAttestationStatusByHostGuidRequest) GetHostGuid() string {
	if x != nil {
		return x.HostGuid
	}
	return ""
}

func (x *UpdateInstanceAttestationStatusByHostGuidRequest) GetAttestationStatus() AttestationStatus {
	if x != nil {
		return x.AttestationStatus
	}
	return AttestationStatus_ATTESTATION_STATUS_UNSPECIFIED
}

func (x *UpdateInstanceAttestationStatusByHostGuidRequest) GetAttestationStatusDetail() string {
	if x != nil {
		return x.AttestationStatusDetail
	}
	return ""
}

type UpdateInstanceAttestationStatusByHostGuidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateInstanceAttestationStatusByHostGuidResponse) Reset() {
	*x = UpdateInstanceAttestationStatusByHostGuidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attestmgr_v1_attestmgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstanceAttestationStatusByHostGuidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstanceAttestationStatusByHostGuidResponse) ProtoMessage() {}

func (x *UpdateInstanceAttestationStatusByHostGuidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_attestmgr_v1_attestmgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstanceAttestationStatusByHostGuidResponse.ProtoReflect.Descriptor instead.
func (*UpdateInstanceAttestationStatusByHostGuidResponse) Descriptor() ([]byte, []int) {
	return file_attestmgr_v1_attestmgr_proto_rawDescGZIP(), []int{1}
}

var File_attestmgr_v1_attestmgr_proto protoreflect.FileDescriptor

var file_attestmgr_v1_attestmgr_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x30, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x11, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22,
	0x33, 0x0a, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x77, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x54, 0x54,
	0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0xce, 0x01,
	0x0a, 0x1b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xae, 0x01,
	0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x2e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x10,
	0x5a, 0x0e, 0x2e, 0x3b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x67, 0x72, 0x5f, 0x73, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_attestmgr_v1_attestmgr_proto_rawDescOnce sync.Once
	file_attestmgr_v1_attestmgr_proto_rawDescData = file_attestmgr_v1_attestmgr_proto_rawDesc
)

func file_attestmgr_v1_attestmgr_proto_rawDescGZIP() []byte {
	file_attestmgr_v1_attestmgr_proto_rawDescOnce.Do(func() {
		file_attestmgr_v1_attestmgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_attestmgr_v1_attestmgr_proto_rawDescData)
	})
	return file_attestmgr_v1_attestmgr_proto_rawDescData
}

var file_attestmgr_v1_attestmgr_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_attestmgr_v1_attestmgr_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_attestmgr_v1_attestmgr_proto_goTypes = []interface{}{
	(AttestationStatus)(0), // 0: attestmgr.v1.AttestationStatus
	(*UpdateInstanceAttestationStatusByHostGuidRequest)(nil),  // 1: attestmgr.v1.UpdateInstanceAttestationStatusByHostGuidRequest
	(*UpdateInstanceAttestationStatusByHostGuidResponse)(nil), // 2: attestmgr.v1.UpdateInstanceAttestationStatusByHostGuidResponse
}
var file_attestmgr_v1_attestmgr_proto_depIdxs = []int32{
	0, // 0: attestmgr.v1.UpdateInstanceAttestationStatusByHostGuidRequest.attestation_status:type_name -> attestmgr.v1.AttestationStatus
	1, // 1: attestmgr.v1.AttestationStatusMgrService.UpdateInstanceAttestationStatusByHostGuid:input_type -> attestmgr.v1.UpdateInstanceAttestationStatusByHostGuidRequest
	2, // 2: attestmgr.v1.AttestationStatusMgrService.UpdateInstanceAttestationStatusByHostGuid:output_type -> attestmgr.v1.UpdateInstanceAttestationStatusByHostGuidResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_attestmgr_v1_attestmgr_proto_init() }
func file_attestmgr_v1_attestmgr_proto_init() {
	if File_attestmgr_v1_attestmgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_attestmgr_v1_attestmgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAttestationStatusByHostGuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attestmgr_v1_attestmgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstanceAttestationStatusByHostGuidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_attestmgr_v1_attestmgr_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_attestmgr_v1_attestmgr_proto_goTypes,
		DependencyIndexes: file_attestmgr_v1_attestmgr_proto_depIdxs,
		EnumInfos:         file_attestmgr_v1_attestmgr_proto_enumTypes,
		MessageInfos:      file_attestmgr_v1_attestmgr_proto_msgTypes,
	}.Build()
	File_attestmgr_v1_attestmgr_proto = out.File
	file_attestmgr_v1_attestmgr_proto_rawDesc = nil
	file_attestmgr_v1_attestmgr_proto_goTypes = nil
	file_attestmgr_v1_attestmgr_proto_depIdxs = nil
}
