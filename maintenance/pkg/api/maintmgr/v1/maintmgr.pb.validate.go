// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: maintmgr/v1/maintmgr.proto

package maintmgrv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _maintmgr_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UpdateStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateStatusMultiError, or
// nil if none found.
func (m *UpdateStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusType

	// no validation rules for StatusDetail

	// no validation rules for ProfileName

	// no validation rules for ProfileVersion

	// no validation rules for OsImageId

	if len(errors) > 0 {
		return UpdateStatusMultiError(errors)
	}

	return nil
}

// UpdateStatusMultiError is an error wrapping multiple validation errors
// returned by UpdateStatus.ValidateAll() if the designated constraints aren't met.
type UpdateStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStatusMultiError) AllErrors() []error { return m }

// UpdateStatusValidationError is the validation error returned by
// UpdateStatus.Validate if the designated constraints aren't met.
type UpdateStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusValidationError) ErrorName() string { return "UpdateStatusValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusValidationError{}

// Validate checks the field values on PlatformUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatformUpdateStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformUpdateStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatformUpdateStatusRequestMultiError, or nil if none found.
func (m *PlatformUpdateStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformUpdateStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetHostGuid()) > 36 {
		err := PlatformUpdateStatusRequestValidationError{
			field:  "HostGuid",
			reason: "value length must be at most 36 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetHostGuid()); err != nil {
		err = PlatformUpdateStatusRequestValidationError{
			field:  "HostGuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdateStatus() == nil {
		err := PlatformUpdateStatusRequestValidationError{
			field:  "UpdateStatus",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatformUpdateStatusRequestValidationError{
					field:  "UpdateStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatformUpdateStatusRequestValidationError{
					field:  "UpdateStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatformUpdateStatusRequestValidationError{
				field:  "UpdateStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatformUpdateStatusRequestMultiError(errors)
	}

	return nil
}

func (m *PlatformUpdateStatusRequest) _validateUuid(uuid string) error {
	if matched := _maintmgr_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PlatformUpdateStatusRequestMultiError is an error wrapping multiple
// validation errors returned by PlatformUpdateStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type PlatformUpdateStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformUpdateStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformUpdateStatusRequestMultiError) AllErrors() []error { return m }

// PlatformUpdateStatusRequestValidationError is the validation error returned
// by PlatformUpdateStatusRequest.Validate if the designated constraints
// aren't met.
type PlatformUpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformUpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformUpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformUpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformUpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformUpdateStatusRequestValidationError) ErrorName() string {
	return "PlatformUpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PlatformUpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformUpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformUpdateStatusRequestValidationError{}

// Validate checks the field values on SingleSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SingleSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SingleScheduleMultiError,
// or nil if none found.
func (m *SingleSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartSeconds

	// no validation rules for EndSeconds

	if len(errors) > 0 {
		return SingleScheduleMultiError(errors)
	}

	return nil
}

// SingleScheduleMultiError is an error wrapping multiple validation errors
// returned by SingleSchedule.ValidateAll() if the designated constraints
// aren't met.
type SingleScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleScheduleMultiError) AllErrors() []error { return m }

// SingleScheduleValidationError is the validation error returned by
// SingleSchedule.Validate if the designated constraints aren't met.
type SingleScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleScheduleValidationError) ErrorName() string { return "SingleScheduleValidationError" }

// Error satisfies the builtin error interface
func (e SingleScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleScheduleValidationError{}

// Validate checks the field values on RepeatedSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatedSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedSchedule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedScheduleMultiError, or nil if none found.
func (m *RepeatedSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDurationSeconds() != 0 {

		if val := m.GetDurationSeconds(); val < 1 || val > 86400 {
			err := RepeatedScheduleValidationError{
				field:  "DurationSeconds",
				reason: "value must be inside range [1, 86400]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if !_RepeatedSchedule_CronMinutes_Pattern.MatchString(m.GetCronMinutes()) {
		err := RepeatedScheduleValidationError{
			field:  "CronMinutes",
			reason: "value does not match regex pattern \"^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedSchedule_CronHours_Pattern.MatchString(m.GetCronHours()) {
		err := RepeatedScheduleValidationError{
			field:  "CronHours",
			reason: "value does not match regex pattern \"^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedSchedule_CronDayMonth_Pattern.MatchString(m.GetCronDayMonth()) {
		err := RepeatedScheduleValidationError{
			field:  "CronDayMonth",
			reason: "value does not match regex pattern \"^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedSchedule_CronMonth_Pattern.MatchString(m.GetCronMonth()) {
		err := RepeatedScheduleValidationError{
			field:  "CronMonth",
			reason: "value does not match regex pattern \"^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedSchedule_CronDayWeek_Pattern.MatchString(m.GetCronDayWeek()) {
		err := RepeatedScheduleValidationError{
			field:  "CronDayWeek",
			reason: "value does not match regex pattern \"^([*]|([0-6])((,([0-6]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RepeatedScheduleMultiError(errors)
	}

	return nil
}

// RepeatedScheduleMultiError is an error wrapping multiple validation errors
// returned by RepeatedSchedule.ValidateAll() if the designated constraints
// aren't met.
type RepeatedScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatedScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatedScheduleMultiError) AllErrors() []error { return m }

// RepeatedScheduleValidationError is the validation error returned by
// RepeatedSchedule.Validate if the designated constraints aren't met.
type RepeatedScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedScheduleValidationError) ErrorName() string { return "RepeatedScheduleValidationError" }

// Error satisfies the builtin error interface
func (e RepeatedScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedScheduleValidationError{}

var _RepeatedSchedule_CronMinutes_Pattern = regexp.MustCompile("^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$")

var _RepeatedSchedule_CronHours_Pattern = regexp.MustCompile("^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$")

var _RepeatedSchedule_CronDayMonth_Pattern = regexp.MustCompile("^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$")

var _RepeatedSchedule_CronMonth_Pattern = regexp.MustCompile("^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$")

var _RepeatedSchedule_CronDayWeek_Pattern = regexp.MustCompile("^([*]|([0-6])((,([0-6]))*))$")

// Validate checks the field values on UpdateSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateScheduleMultiError,
// or nil if none found.
func (m *UpdateSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSingleSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScheduleValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScheduleValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScheduleValidationError{
				field:  "SingleSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepeatedSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateScheduleValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateScheduleValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatedSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateScheduleValidationError{
				field:  "RepeatedSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRepeatedSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateScheduleValidationError{
						field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateScheduleValidationError{
						field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateScheduleValidationError{
					field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateScheduleMultiError(errors)
	}

	return nil
}

// UpdateScheduleMultiError is an error wrapping multiple validation errors
// returned by UpdateSchedule.ValidateAll() if the designated constraints
// aren't met.
type UpdateScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateScheduleMultiError) AllErrors() []error { return m }

// UpdateScheduleValidationError is the validation error returned by
// UpdateSchedule.Validate if the designated constraints aren't met.
type UpdateScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateScheduleValidationError) ErrorName() string { return "UpdateScheduleValidationError" }

// Error satisfies the builtin error interface
func (e UpdateScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateScheduleValidationError{}

// Validate checks the field values on PlatformUpdateStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlatformUpdateStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlatformUpdateStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlatformUpdateStatusResponseMultiError, or nil if none found.
func (m *PlatformUpdateStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PlatformUpdateStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUpdateSource() == nil {
		err := PlatformUpdateStatusResponseValidationError{
			field:  "UpdateSource",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUpdateSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatformUpdateStatusResponseValidationError{
					field:  "UpdateSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatformUpdateStatusResponseValidationError{
					field:  "UpdateSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatformUpdateStatusResponseValidationError{
				field:  "UpdateSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatformUpdateStatusResponseValidationError{
					field:  "UpdateSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatformUpdateStatusResponseValidationError{
					field:  "UpdateSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatformUpdateStatusResponseValidationError{
				field:  "UpdateSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstalledPackages

	// no validation rules for OsType

	if all {
		switch v := interface{}(m.GetOsProfileUpdateSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlatformUpdateStatusResponseValidationError{
					field:  "OsProfileUpdateSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlatformUpdateStatusResponseValidationError{
					field:  "OsProfileUpdateSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOsProfileUpdateSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlatformUpdateStatusResponseValidationError{
				field:  "OsProfileUpdateSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PlatformUpdateStatusResponseMultiError(errors)
	}

	return nil
}

// PlatformUpdateStatusResponseMultiError is an error wrapping multiple
// validation errors returned by PlatformUpdateStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type PlatformUpdateStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlatformUpdateStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlatformUpdateStatusResponseMultiError) AllErrors() []error { return m }

// PlatformUpdateStatusResponseValidationError is the validation error returned
// by PlatformUpdateStatusResponse.Validate if the designated constraints
// aren't met.
type PlatformUpdateStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlatformUpdateStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlatformUpdateStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlatformUpdateStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlatformUpdateStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlatformUpdateStatusResponseValidationError) ErrorName() string {
	return "PlatformUpdateStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PlatformUpdateStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlatformUpdateStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlatformUpdateStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlatformUpdateStatusResponseValidationError{}

// Validate checks the field values on UpdateSource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateSourceMultiError, or
// nil if none found.
func (m *UpdateSource) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for KernelCommand

	// no validation rules for OsRepoUrl

	if len(errors) > 0 {
		return UpdateSourceMultiError(errors)
	}

	return nil
}

// UpdateSourceMultiError is an error wrapping multiple validation errors
// returned by UpdateSource.ValidateAll() if the designated constraints aren't met.
type UpdateSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSourceMultiError) AllErrors() []error { return m }

// UpdateSourceValidationError is the validation error returned by
// UpdateSource.Validate if the designated constraints aren't met.
type UpdateSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSourceValidationError) ErrorName() string { return "UpdateSourceValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSourceValidationError{}

// Validate checks the field values on OSProfileUpdateSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OSProfileUpdateSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OSProfileUpdateSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OSProfileUpdateSourceMultiError, or nil if none found.
func (m *OSProfileUpdateSource) ValidateAll() error {
	return m.validate(true)
}

func (m *OSProfileUpdateSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OsImageUrl

	// no validation rules for OsImageId

	// no validation rules for OsImageSha

	// no validation rules for ProfileName

	// no validation rules for ProfileVersion

	if len(errors) > 0 {
		return OSProfileUpdateSourceMultiError(errors)
	}

	return nil
}

// OSProfileUpdateSourceMultiError is an error wrapping multiple validation
// errors returned by OSProfileUpdateSource.ValidateAll() if the designated
// constraints aren't met.
type OSProfileUpdateSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OSProfileUpdateSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OSProfileUpdateSourceMultiError) AllErrors() []error { return m }

// OSProfileUpdateSourceValidationError is the validation error returned by
// OSProfileUpdateSource.Validate if the designated constraints aren't met.
type OSProfileUpdateSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OSProfileUpdateSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OSProfileUpdateSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OSProfileUpdateSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OSProfileUpdateSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OSProfileUpdateSourceValidationError) ErrorName() string {
	return "OSProfileUpdateSourceValidationError"
}

// Error satisfies the builtin error interface
func (e OSProfileUpdateSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOSProfileUpdateSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OSProfileUpdateSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OSProfileUpdateSourceValidationError{}
