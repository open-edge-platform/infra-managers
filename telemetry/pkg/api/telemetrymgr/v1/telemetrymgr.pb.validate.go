// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: telemetrymgr/v1/telemetrymgr.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _telemetrymgr_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetTelemetryConfigByGuidRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryConfigByGuidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryConfigByGuidRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTelemetryConfigByGuidRequestMultiError, or nil if none found.
func (m *GetTelemetryConfigByGuidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryConfigByGuidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetGuid()) > 36 {
		err := GetTelemetryConfigByGuidRequestValidationError{
			field:  "Guid",
			reason: "value length must be at most 36 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetGuid()); err != nil {
		err = GetTelemetryConfigByGuidRequestValidationError{
			field:  "Guid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTelemetryConfigByGuidRequestMultiError(errors)
	}

	return nil
}

func (m *GetTelemetryConfigByGuidRequest) _validateUuid(uuid string) error {
	if matched := _telemetrymgr_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetTelemetryConfigByGuidRequestMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryConfigByGuidRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTelemetryConfigByGuidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryConfigByGuidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryConfigByGuidRequestMultiError) AllErrors() []error { return m }

// GetTelemetryConfigByGuidRequestValidationError is the validation error
// returned by GetTelemetryConfigByGuidRequest.Validate if the designated
// constraints aren't met.
type GetTelemetryConfigByGuidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryConfigByGuidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryConfigByGuidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryConfigByGuidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryConfigByGuidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryConfigByGuidRequestValidationError) ErrorName() string {
	return "GetTelemetryConfigByGuidRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryConfigByGuidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryConfigByGuidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryConfigByGuidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryConfigByGuidRequestValidationError{}

// Validate checks the field values on GetTelemetryConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTelemetryConfigResponseMultiError, or nil if none found.
func (m *GetTelemetryConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetHostGuid()) > 36 {
		err := GetTelemetryConfigResponseValidationError{
			field:  "HostGuid",
			reason: "value length must be at most 36 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetHostGuid()); err != nil {
		err = GetTelemetryConfigResponseValidationError{
			field:  "HostGuid",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GetTelemetryConfigResponse_Timestamp_Pattern.MatchString(m.GetTimestamp()) {
		err := GetTelemetryConfigResponseValidationError{
			field:  "Timestamp",
			reason: "value does not match regex pattern \"^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[-+][0-9]{2}:[0-9]{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCfg() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTelemetryConfigResponseValidationError{
						field:  fmt.Sprintf("Cfg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTelemetryConfigResponseValidationError{
						field:  fmt.Sprintf("Cfg[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTelemetryConfigResponseValidationError{
					field:  fmt.Sprintf("Cfg[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTelemetryConfigResponseMultiError(errors)
	}

	return nil
}

func (m *GetTelemetryConfigResponse) _validateUuid(uuid string) error {
	if matched := _telemetrymgr_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetTelemetryConfigResponseMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryConfigResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTelemetryConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryConfigResponseMultiError) AllErrors() []error { return m }

// GetTelemetryConfigResponseValidationError is the validation error returned
// by GetTelemetryConfigResponse.Validate if the designated constraints aren't met.
type GetTelemetryConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryConfigResponseValidationError) ErrorName() string {
	return "GetTelemetryConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryConfigResponseValidationError{}

var _GetTelemetryConfigResponse_Timestamp_Pattern = regexp.MustCompile("^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[-+][0-9]{2}:[0-9]{2}$")

// Validate checks the field values on GetTelemetryConfigResponse_TelemetryCfg
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetTelemetryConfigResponse_TelemetryCfg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetTelemetryConfigResponse_TelemetryCfg with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetTelemetryConfigResponse_TelemetryCfgMultiError, or nil if none found.
func (m *GetTelemetryConfigResponse_TelemetryCfg) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryConfigResponse_TelemetryCfg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Kind

	// no validation rules for Level

	if len(errors) > 0 {
		return GetTelemetryConfigResponse_TelemetryCfgMultiError(errors)
	}

	return nil
}

// GetTelemetryConfigResponse_TelemetryCfgMultiError is an error wrapping
// multiple validation errors returned by
// GetTelemetryConfigResponse_TelemetryCfg.ValidateAll() if the designated
// constraints aren't met.
type GetTelemetryConfigResponse_TelemetryCfgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryConfigResponse_TelemetryCfgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryConfigResponse_TelemetryCfgMultiError) AllErrors() []error { return m }

// GetTelemetryConfigResponse_TelemetryCfgValidationError is the validation
// error returned by GetTelemetryConfigResponse_TelemetryCfg.Validate if the
// designated constraints aren't met.
type GetTelemetryConfigResponse_TelemetryCfgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryConfigResponse_TelemetryCfgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryConfigResponse_TelemetryCfgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryConfigResponse_TelemetryCfgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryConfigResponse_TelemetryCfgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryConfigResponse_TelemetryCfgValidationError) ErrorName() string {
	return "GetTelemetryConfigResponse_TelemetryCfgValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryConfigResponse_TelemetryCfgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryConfigResponse_TelemetryCfg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryConfigResponse_TelemetryCfgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryConfigResponse_TelemetryCfgValidationError{}
