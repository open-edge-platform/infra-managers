// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// File: telemetrymgr.proto
// Description:
//   Defines a message format for interacting with telemetry manager

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: telemetrymgr/v1/telemetrymgr.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum representing severity level required for logging input.
type SeverityLevel int32

const (
	SeverityLevel_SEVERITY_LEVEL_UNSPECIFIED SeverityLevel = 0
	SeverityLevel_SEVERITY_LEVEL_CRITICAL    SeverityLevel = 1
	SeverityLevel_SEVERITY_LEVEL_ERROR       SeverityLevel = 2
	SeverityLevel_SEVERITY_LEVEL_WARN        SeverityLevel = 3
	SeverityLevel_SEVERITY_LEVEL_INFO        SeverityLevel = 4
	SeverityLevel_SEVERITY_LEVEL_DEBUG       SeverityLevel = 5
)

// Enum value maps for SeverityLevel.
var (
	SeverityLevel_name = map[int32]string{
		0: "SEVERITY_LEVEL_UNSPECIFIED",
		1: "SEVERITY_LEVEL_CRITICAL",
		2: "SEVERITY_LEVEL_ERROR",
		3: "SEVERITY_LEVEL_WARN",
		4: "SEVERITY_LEVEL_INFO",
		5: "SEVERITY_LEVEL_DEBUG",
	}
	SeverityLevel_value = map[string]int32{
		"SEVERITY_LEVEL_UNSPECIFIED": 0,
		"SEVERITY_LEVEL_CRITICAL":    1,
		"SEVERITY_LEVEL_ERROR":       2,
		"SEVERITY_LEVEL_WARN":        3,
		"SEVERITY_LEVEL_INFO":        4,
		"SEVERITY_LEVEL_DEBUG":       5,
	}
)

func (x SeverityLevel) Enum() *SeverityLevel {
	p := new(SeverityLevel)
	*p = x
	return p
}

func (x SeverityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetrymgr_v1_telemetrymgr_proto_enumTypes[0].Descriptor()
}

func (SeverityLevel) Type() protoreflect.EnumType {
	return &file_telemetrymgr_v1_telemetrymgr_proto_enumTypes[0]
}

func (x SeverityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityLevel.Descriptor instead.
func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP(), []int{0}
}

// Enum representing telemetry kind/type of an input.
type TelemetryResourceKind int32

const (
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_UNSPECIFIED TelemetryResourceKind = 0
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_METRICS     TelemetryResourceKind = 1
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_LOGS        TelemetryResourceKind = 2
)

// Enum value maps for TelemetryResourceKind.
var (
	TelemetryResourceKind_name = map[int32]string{
		0: "TELEMETRY_RESOURCE_KIND_UNSPECIFIED",
		1: "TELEMETRY_RESOURCE_KIND_METRICS",
		2: "TELEMETRY_RESOURCE_KIND_LOGS",
	}
	TelemetryResourceKind_value = map[string]int32{
		"TELEMETRY_RESOURCE_KIND_UNSPECIFIED": 0,
		"TELEMETRY_RESOURCE_KIND_METRICS":     1,
		"TELEMETRY_RESOURCE_KIND_LOGS":        2,
	}
)

func (x TelemetryResourceKind) Enum() *TelemetryResourceKind {
	p := new(TelemetryResourceKind)
	*p = x
	return p
}

func (x TelemetryResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetrymgr_v1_telemetrymgr_proto_enumTypes[1].Descriptor()
}

func (TelemetryResourceKind) Type() protoreflect.EnumType {
	return &file_telemetrymgr_v1_telemetrymgr_proto_enumTypes[1]
}

func (x TelemetryResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryResourceKind.Descriptor instead.
func (TelemetryResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP(), []int{1}
}

// Enum representing telemetry collector environment in which the input will be collected.
type CollectorKind int32

const (
	CollectorKind_COLLECTOR_KIND_UNSPECIFIED CollectorKind = 0
	CollectorKind_COLLECTOR_KIND_HOST        CollectorKind = 1 // telemetry data collected from bare-metal host
	CollectorKind_COLLECTOR_KIND_CLUSTER     CollectorKind = 2 // telemetry data collected from Kubernetes cluster
)

// Enum value maps for CollectorKind.
var (
	CollectorKind_name = map[int32]string{
		0: "COLLECTOR_KIND_UNSPECIFIED",
		1: "COLLECTOR_KIND_HOST",
		2: "COLLECTOR_KIND_CLUSTER",
	}
	CollectorKind_value = map[string]int32{
		"COLLECTOR_KIND_UNSPECIFIED": 0,
		"COLLECTOR_KIND_HOST":        1,
		"COLLECTOR_KIND_CLUSTER":     2,
	}
)

func (x CollectorKind) Enum() *CollectorKind {
	p := new(CollectorKind)
	*p = x
	return p
}

func (x CollectorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_telemetrymgr_v1_telemetrymgr_proto_enumTypes[2].Descriptor()
}

func (CollectorKind) Type() protoreflect.EnumType {
	return &file_telemetrymgr_v1_telemetrymgr_proto_enumTypes[2]
}

func (x CollectorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectorKind.Descriptor instead.
func (CollectorKind) EnumDescriptor() ([]byte, []int) {
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP(), []int{2}
}

// Message representing a config request based on host UUID.
type GetTelemetryConfigByGuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
}

func (x *GetTelemetryConfigByGuidRequest) Reset() {
	*x = GetTelemetryConfigByGuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelemetryConfigByGuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelemetryConfigByGuidRequest) ProtoMessage() {}

func (x *GetTelemetryConfigByGuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelemetryConfigByGuidRequest.ProtoReflect.Descriptor instead.
func (*GetTelemetryConfigByGuidRequest) Descriptor() ([]byte, []int) {
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP(), []int{0}
}

func (x *GetTelemetryConfigByGuidRequest) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

// Message representing a response to a request for config.
type GetTelemetryConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostGuid  string                                     `protobuf:"bytes,1,opt,name=host_guid,json=hostGuid,proto3" json:"host_guid,omitempty"` // guid of the Node
	Timestamp string                                     `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`               //latest timestamp of the overall update from Orchestrator, used by TA to determine re-run
	Cfg       []*GetTelemetryConfigResponse_TelemetryCfg `protobuf:"bytes,3,rep,name=cfg,proto3" json:"cfg,omitempty"`
}

func (x *GetTelemetryConfigResponse) Reset() {
	*x = GetTelemetryConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelemetryConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelemetryConfigResponse) ProtoMessage() {}

func (x *GetTelemetryConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelemetryConfigResponse.ProtoReflect.Descriptor instead.
func (*GetTelemetryConfigResponse) Descriptor() ([]byte, []int) {
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP(), []int{1}
}

func (x *GetTelemetryConfigResponse) GetHostGuid() string {
	if x != nil {
		return x.HostGuid
	}
	return ""
}

func (x *GetTelemetryConfigResponse) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *GetTelemetryConfigResponse) GetCfg() []*GetTelemetryConfigResponse_TelemetryCfg {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type GetTelemetryConfigResponse_TelemetryCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input    string                `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`                                           // plugin name of telegraf/fluent-bit
	Type     TelemetryResourceKind `protobuf:"varint,2,opt,name=type,proto3,enum=telemetrymgr.v1.TelemetryResourceKind" json:"type,omitempty"` // indicating from telegraf or fluent-bit
	Kind     CollectorKind         `protobuf:"varint,3,opt,name=kind,proto3,enum=telemetrymgr.v1.CollectorKind" json:"kind,omitempty"`         // indicating collected from host or cluster
	Level    SeverityLevel         `protobuf:"varint,4,opt,name=level,proto3,enum=telemetrymgr.v1.SeverityLevel" json:"level,omitempty"`       // severity level of log
	Interval int64                 `protobuf:"varint,5,opt,name=interval,proto3" json:"interval,omitempty"`                                    // interval of metric
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) Reset() {
	*x = GetTelemetryConfigResponse_TelemetryCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTelemetryConfigResponse_TelemetryCfg) ProtoMessage() {}

func (x *GetTelemetryConfigResponse_TelemetryCfg) ProtoReflect() protoreflect.Message {
	mi := &file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTelemetryConfigResponse_TelemetryCfg.ProtoReflect.Descriptor instead.
func (*GetTelemetryConfigResponse_TelemetryCfg) Descriptor() ([]byte, []int) {
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) GetType() TelemetryResourceKind {
	if x != nil {
		return x.Type
	}
	return TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_UNSPECIFIED
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) GetKind() CollectorKind {
	if x != nil {
		return x.Kind
	}
	return CollectorKind_COLLECTOR_KIND_UNSPECIFIED
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) GetLevel() SeverityLevel {
	if x != nil {
		return x.Level
	}
	return SeverityLevel_SEVERITY_LEVEL_UNSPECIFIED
}

func (x *GetTelemetryConfigResponse_TelemetryCfg) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

var File_telemetrymgr_v1_telemetrymgr_proto protoreflect.FileDescriptor

var file_telemetrymgr_v1_telemetrymgr_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x6d,
	0x67, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x22, 0x80, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x71, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0xfa, 0x42,
	0x50, 0x72, 0x4e, 0x32, 0x4c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d,
	0x54, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x3a, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b,
	0x32, 0x7d, 0x3a, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x5b, 0x2d, 0x2b, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d, 0x3a, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x32, 0x7d,
	0x24, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4a, 0x0a, 0x03,
	0x63, 0x66, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x66, 0x67, 0x52, 0x03, 0x63, 0x66, 0x67, 0x1a, 0xf9, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x66, 0x67, 0x12, 0x1e, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0,
	0x01, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x6d,
	0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x40, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x2a, 0xb2, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a, 0x15, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x47,
	0x53, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x32, 0x8b, 0x01, 0x0a, 0x0c, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x67, 0x72, 0x12, 0x7b, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x79, 0x47, 0x55, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x79, 0x47, 0x75, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_telemetrymgr_v1_telemetrymgr_proto_rawDescOnce sync.Once
	file_telemetrymgr_v1_telemetrymgr_proto_rawDescData = file_telemetrymgr_v1_telemetrymgr_proto_rawDesc
)

func file_telemetrymgr_v1_telemetrymgr_proto_rawDescGZIP() []byte {
	file_telemetrymgr_v1_telemetrymgr_proto_rawDescOnce.Do(func() {
		file_telemetrymgr_v1_telemetrymgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_telemetrymgr_v1_telemetrymgr_proto_rawDescData)
	})
	return file_telemetrymgr_v1_telemetrymgr_proto_rawDescData
}

var file_telemetrymgr_v1_telemetrymgr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_telemetrymgr_v1_telemetrymgr_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_telemetrymgr_v1_telemetrymgr_proto_goTypes = []interface{}{
	(SeverityLevel)(0),                              // 0: telemetrymgr.v1.SeverityLevel
	(TelemetryResourceKind)(0),                      // 1: telemetrymgr.v1.TelemetryResourceKind
	(CollectorKind)(0),                              // 2: telemetrymgr.v1.CollectorKind
	(*GetTelemetryConfigByGuidRequest)(nil),         // 3: telemetrymgr.v1.GetTelemetryConfigByGuidRequest
	(*GetTelemetryConfigResponse)(nil),              // 4: telemetrymgr.v1.GetTelemetryConfigResponse
	(*GetTelemetryConfigResponse_TelemetryCfg)(nil), // 5: telemetrymgr.v1.GetTelemetryConfigResponse.TelemetryCfg
}
var file_telemetrymgr_v1_telemetrymgr_proto_depIdxs = []int32{
	5, // 0: telemetrymgr.v1.GetTelemetryConfigResponse.cfg:type_name -> telemetrymgr.v1.GetTelemetryConfigResponse.TelemetryCfg
	1, // 1: telemetrymgr.v1.GetTelemetryConfigResponse.TelemetryCfg.type:type_name -> telemetrymgr.v1.TelemetryResourceKind
	2, // 2: telemetrymgr.v1.GetTelemetryConfigResponse.TelemetryCfg.kind:type_name -> telemetrymgr.v1.CollectorKind
	0, // 3: telemetrymgr.v1.GetTelemetryConfigResponse.TelemetryCfg.level:type_name -> telemetrymgr.v1.SeverityLevel
	3, // 4: telemetrymgr.v1.TelemetryMgr.GetTelemetryConfigByGUID:input_type -> telemetrymgr.v1.GetTelemetryConfigByGuidRequest
	4, // 5: telemetrymgr.v1.TelemetryMgr.GetTelemetryConfigByGUID:output_type -> telemetrymgr.v1.GetTelemetryConfigResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_telemetrymgr_v1_telemetrymgr_proto_init() }
func file_telemetrymgr_v1_telemetrymgr_proto_init() {
	if File_telemetrymgr_v1_telemetrymgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelemetryConfigByGuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelemetryConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telemetrymgr_v1_telemetrymgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTelemetryConfigResponse_TelemetryCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telemetrymgr_v1_telemetrymgr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_telemetrymgr_v1_telemetrymgr_proto_goTypes,
		DependencyIndexes: file_telemetrymgr_v1_telemetrymgr_proto_depIdxs,
		EnumInfos:         file_telemetrymgr_v1_telemetrymgr_proto_enumTypes,
		MessageInfos:      file_telemetrymgr_v1_telemetrymgr_proto_msgTypes,
	}.Build()
	File_telemetrymgr_v1_telemetrymgr_proto = out.File
	file_telemetrymgr_v1_telemetrymgr_proto_rawDesc = nil
	file_telemetrymgr_v1_telemetrymgr_proto_goTypes = nil
	file_telemetrymgr_v1_telemetrymgr_proto_depIdxs = nil
}
