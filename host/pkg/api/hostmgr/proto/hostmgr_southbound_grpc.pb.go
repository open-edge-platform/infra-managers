// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: hostmgr/proto/hostmgr_southbound.proto

package hostmgr_southbound

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostmgrClient is the client API for Hostmgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostmgrClient interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	UpdateHostStatusByHostGuid(ctx context.Context, in *UpdateHostStatusByHostGuidRequest, opts ...grpc.CallOption) (*HostStatusResp, error)
	// This call is dedicated to updating of an Instance's Current State AND Instance's Status.
	UpdateInstanceStateStatusByHostGUID(ctx context.Context, in *UpdateInstanceStateStatusByHostGUIDRequest, opts ...grpc.CallOption) (*UpdateInstanceStateStatusByHostGUIDResponse, error)
	// This call will update the Host System info
	UpdateHostSystemInfoByGUID(ctx context.Context, in *UpdateHostSystemInfoByGUIDRequest, opts ...grpc.CallOption) (*UpdateHostSystemInfoByGUIDResponse, error)
}

type hostmgrClient struct {
	cc grpc.ClientConnInterface
}

func NewHostmgrClient(cc grpc.ClientConnInterface) HostmgrClient {
	return &hostmgrClient{cc}
}

func (c *hostmgrClient) UpdateHostStatusByHostGuid(ctx context.Context, in *UpdateHostStatusByHostGuidRequest, opts ...grpc.CallOption) (*HostStatusResp, error) {
	out := new(HostStatusResp)
	err := c.cc.Invoke(ctx, "/hostmgr_southbound_proto.Hostmgr/UpdateHostStatusByHostGuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostmgrClient) UpdateInstanceStateStatusByHostGUID(ctx context.Context, in *UpdateInstanceStateStatusByHostGUIDRequest, opts ...grpc.CallOption) (*UpdateInstanceStateStatusByHostGUIDResponse, error) {
	out := new(UpdateInstanceStateStatusByHostGUIDResponse)
	err := c.cc.Invoke(ctx, "/hostmgr_southbound_proto.Hostmgr/UpdateInstanceStateStatusByHostGUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostmgrClient) UpdateHostSystemInfoByGUID(ctx context.Context, in *UpdateHostSystemInfoByGUIDRequest, opts ...grpc.CallOption) (*UpdateHostSystemInfoByGUIDResponse, error) {
	out := new(UpdateHostSystemInfoByGUIDResponse)
	err := c.cc.Invoke(ctx, "/hostmgr_southbound_proto.Hostmgr/UpdateHostSystemInfoByGUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostmgrServer is the server API for Hostmgr service.
// All implementations should embed UnimplementedHostmgrServer
// for forward compatibility
type HostmgrServer interface {
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	UpdateHostStatusByHostGuid(context.Context, *UpdateHostStatusByHostGuidRequest) (*HostStatusResp, error)
	// This call is dedicated to updating of an Instance's Current State AND Instance's Status.
	UpdateInstanceStateStatusByHostGUID(context.Context, *UpdateInstanceStateStatusByHostGUIDRequest) (*UpdateInstanceStateStatusByHostGUIDResponse, error)
	// This call will update the Host System info
	UpdateHostSystemInfoByGUID(context.Context, *UpdateHostSystemInfoByGUIDRequest) (*UpdateHostSystemInfoByGUIDResponse, error)
}

// UnimplementedHostmgrServer should be embedded to have forward compatible implementations.
type UnimplementedHostmgrServer struct {
}

func (UnimplementedHostmgrServer) UpdateHostStatusByHostGuid(context.Context, *UpdateHostStatusByHostGuidRequest) (*HostStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostStatusByHostGuid not implemented")
}
func (UnimplementedHostmgrServer) UpdateInstanceStateStatusByHostGUID(context.Context, *UpdateInstanceStateStatusByHostGUIDRequest) (*UpdateInstanceStateStatusByHostGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstanceStateStatusByHostGUID not implemented")
}
func (UnimplementedHostmgrServer) UpdateHostSystemInfoByGUID(context.Context, *UpdateHostSystemInfoByGUIDRequest) (*UpdateHostSystemInfoByGUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostSystemInfoByGUID not implemented")
}

// UnsafeHostmgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostmgrServer will
// result in compilation errors.
type UnsafeHostmgrServer interface {
	mustEmbedUnimplementedHostmgrServer()
}

func RegisterHostmgrServer(s grpc.ServiceRegistrar, srv HostmgrServer) {
	s.RegisterService(&Hostmgr_ServiceDesc, srv)
}

func _Hostmgr_UpdateHostStatusByHostGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostStatusByHostGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostmgrServer).UpdateHostStatusByHostGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmgr_southbound_proto.Hostmgr/UpdateHostStatusByHostGuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostmgrServer).UpdateHostStatusByHostGuid(ctx, req.(*UpdateHostStatusByHostGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostmgr_UpdateInstanceStateStatusByHostGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceStateStatusByHostGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostmgrServer).UpdateInstanceStateStatusByHostGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmgr_southbound_proto.Hostmgr/UpdateInstanceStateStatusByHostGUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostmgrServer).UpdateInstanceStateStatusByHostGUID(ctx, req.(*UpdateInstanceStateStatusByHostGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostmgr_UpdateHostSystemInfoByGUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostSystemInfoByGUIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostmgrServer).UpdateHostSystemInfoByGUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmgr_southbound_proto.Hostmgr/UpdateHostSystemInfoByGUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostmgrServer).UpdateHostSystemInfoByGUID(ctx, req.(*UpdateHostSystemInfoByGUIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hostmgr_ServiceDesc is the grpc.ServiceDesc for Hostmgr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hostmgr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hostmgr_southbound_proto.Hostmgr",
	HandlerType: (*HostmgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateHostStatusByHostGuid",
			Handler:    _Hostmgr_UpdateHostStatusByHostGuid_Handler,
		},
		{
			MethodName: "UpdateInstanceStateStatusByHostGUID",
			Handler:    _Hostmgr_UpdateInstanceStateStatusByHostGUID_Handler,
		},
		{
			MethodName: "UpdateHostSystemInfoByGUID",
			Handler:    _Hostmgr_UpdateHostSystemInfoByGUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hostmgr/proto/hostmgr_southbound.proto",
}
